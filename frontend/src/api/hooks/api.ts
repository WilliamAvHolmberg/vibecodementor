/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * API
 * Clean Architecture API with JWT Authentication
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ChatMessageDtoDTO,
  CreateUserRequestDTO,
  CurrentUserResponseDTO,
  GetApiChatMessagesParams,
  GetApiFilesImagesLatestParams,
  GetApiOpenrouterToolsChatStreamParams,
  GetApiUsersParams,
  LoginRequestDTO,
  LoginUserResponseDTO,
  PostApiFilesUploadBody,
  PostApiFilesUploadImageBody,
  ProblemDetailsDTO,
  RegisterRequestDTO,
  RegisterUserResponseDTO,
  RegisterVisitRequestDTO,
  SaveEmailToNewsletterResponseDTO,
  SendOtpRequestDTO,
  SendOtpResponseDTO,
  SubscribeToNewsletterRequestDTO,
  UpdateUserRequestDTO,
  VerifyOtpRequestDTO,
  VerifyOtpResponseDTO
} from '../models';

import { customApiClient } from '../client';
import type { ErrorType } from '../client';




export const postApiAnalyticsVisit = (
    registerVisitRequestDTO: RegisterVisitRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customApiClient<void>(
      {url: `/api/Analytics/visit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerVisitRequestDTO, signal
    },
      );
    }
  


export const getPostApiAnalyticsVisitMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAnalyticsVisit>>, TError,{data: RegisterVisitRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAnalyticsVisit>>, TError,{data: RegisterVisitRequestDTO}, TContext> => {

const mutationKey = ['postApiAnalyticsVisit'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAnalyticsVisit>>, {data: RegisterVisitRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiAnalyticsVisit(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAnalyticsVisitMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAnalyticsVisit>>>
    export type PostApiAnalyticsVisitMutationBody = RegisterVisitRequestDTO
    export type PostApiAnalyticsVisitMutationError = ErrorType<unknown>

    export const usePostApiAnalyticsVisit = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAnalyticsVisit>>, TError,{data: RegisterVisitRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAnalyticsVisit>>,
        TError,
        {data: RegisterVisitRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiAnalyticsVisitMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const get = (
    
 signal?: AbortSignal
) => {
      
      
      return customApiClient<string>(
      {url: `/`, method: 'GET', signal
    },
      );
    }
  

export const getGetQueryKey = () => {
    return [`/`] as const;
    }

    
export const getGetQueryOptions = <TData = Awaited<ReturnType<typeof get>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({ signal }) => get(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>
export type GetQueryError = ErrorType<unknown>


export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof get>>,
          TError,
          Awaited<ReturnType<typeof get>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof get>>,
          TError,
          Awaited<ReturnType<typeof get>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiAuthRegister = (
    registerRequestDTO: RegisterRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customApiClient<RegisterUserResponseDTO>(
      {url: `/api/Auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerRequestDTO, signal
    },
      );
    }
  


export const getPostApiAuthRegisterMutationOptions = <TError = ErrorType<ProblemDetailsDTO>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRegister>>, TError,{data: RegisterRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRegister>>, TError,{data: RegisterRequestDTO}, TContext> => {

const mutationKey = ['postApiAuthRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthRegister>>, {data: RegisterRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthRegister>>>
    export type PostApiAuthRegisterMutationBody = RegisterRequestDTO
    export type PostApiAuthRegisterMutationError = ErrorType<ProblemDetailsDTO>

    export const usePostApiAuthRegister = <TError = ErrorType<ProblemDetailsDTO>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRegister>>, TError,{data: RegisterRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthRegister>>,
        TError,
        {data: RegisterRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiAuthRegisterMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postApiAuthLogin = (
    loginRequestDTO: LoginRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customApiClient<LoginUserResponseDTO>(
      {url: `/api/Auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequestDTO, signal
    },
      );
    }
  


export const getPostApiAuthLoginMutationOptions = <TError = ErrorType<ProblemDetailsDTO>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginRequestDTO}, TContext> => {

const mutationKey = ['postApiAuthLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLogin>>, {data: LoginRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLogin>>>
    export type PostApiAuthLoginMutationBody = LoginRequestDTO
    export type PostApiAuthLoginMutationError = ErrorType<ProblemDetailsDTO>

    export const usePostApiAuthLogin = <TError = ErrorType<ProblemDetailsDTO>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthLogin>>,
        TError,
        {data: LoginRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiAuthLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postApiAuthSendOtp = (
    sendOtpRequestDTO: SendOtpRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customApiClient<SendOtpResponseDTO>(
      {url: `/api/Auth/send-otp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendOtpRequestDTO, signal
    },
      );
    }
  


export const getPostApiAuthSendOtpMutationOptions = <TError = ErrorType<ProblemDetailsDTO>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthSendOtp>>, TError,{data: SendOtpRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthSendOtp>>, TError,{data: SendOtpRequestDTO}, TContext> => {

const mutationKey = ['postApiAuthSendOtp'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthSendOtp>>, {data: SendOtpRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthSendOtp(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthSendOtpMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthSendOtp>>>
    export type PostApiAuthSendOtpMutationBody = SendOtpRequestDTO
    export type PostApiAuthSendOtpMutationError = ErrorType<ProblemDetailsDTO>

    export const usePostApiAuthSendOtp = <TError = ErrorType<ProblemDetailsDTO>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthSendOtp>>, TError,{data: SendOtpRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthSendOtp>>,
        TError,
        {data: SendOtpRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiAuthSendOtpMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postApiAuthVerifyOtp = (
    verifyOtpRequestDTO: VerifyOtpRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customApiClient<VerifyOtpResponseDTO>(
      {url: `/api/Auth/verify-otp`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: verifyOtpRequestDTO, signal
    },
      );
    }
  


export const getPostApiAuthVerifyOtpMutationOptions = <TError = ErrorType<ProblemDetailsDTO>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthVerifyOtp>>, TError,{data: VerifyOtpRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthVerifyOtp>>, TError,{data: VerifyOtpRequestDTO}, TContext> => {

const mutationKey = ['postApiAuthVerifyOtp'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthVerifyOtp>>, {data: VerifyOtpRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthVerifyOtp(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthVerifyOtpMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthVerifyOtp>>>
    export type PostApiAuthVerifyOtpMutationBody = VerifyOtpRequestDTO
    export type PostApiAuthVerifyOtpMutationError = ErrorType<ProblemDetailsDTO>

    export const usePostApiAuthVerifyOtp = <TError = ErrorType<ProblemDetailsDTO>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthVerifyOtp>>, TError,{data: VerifyOtpRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthVerifyOtp>>,
        TError,
        {data: VerifyOtpRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiAuthVerifyOtpMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiAuthMe = (
    
 signal?: AbortSignal
) => {
      
      
      return customApiClient<CurrentUserResponseDTO>(
      {url: `/api/Auth/me`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiAuthMeQueryKey = () => {
    return [`/api/Auth/me`] as const;
    }

    
export const getGetApiAuthMeQueryOptions = <TData = Awaited<ReturnType<typeof getApiAuthMe>>, TError = ErrorType<ProblemDetailsDTO>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAuthMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthMe>>> = ({ signal }) => getApiAuthMe(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiAuthMeQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAuthMe>>>
export type GetApiAuthMeQueryError = ErrorType<ProblemDetailsDTO>


export function useGetApiAuthMe<TData = Awaited<ReturnType<typeof getApiAuthMe>>, TError = ErrorType<ProblemDetailsDTO>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthMe>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthMe>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthMe<TData = Awaited<ReturnType<typeof getApiAuthMe>>, TError = ErrorType<ProblemDetailsDTO>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthMe>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthMe>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthMe<TData = Awaited<ReturnType<typeof getApiAuthMe>>, TError = ErrorType<ProblemDetailsDTO>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiAuthMe<TData = Awaited<ReturnType<typeof getApiAuthMe>>, TError = ErrorType<ProblemDetailsDTO>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthMe>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiAuthMeQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiChatMessages = (
    params?: GetApiChatMessagesParams,
 signal?: AbortSignal
) => {
      
      
      return customApiClient<ChatMessageDtoDTO[]>(
      {url: `/api/Chat/messages`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiChatMessagesQueryKey = (params?: GetApiChatMessagesParams,) => {
    return [`/api/Chat/messages`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiChatMessagesQueryOptions = <TData = Awaited<ReturnType<typeof getApiChatMessages>>, TError = ErrorType<unknown>>(params?: GetApiChatMessagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiChatMessages>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiChatMessagesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiChatMessages>>> = ({ signal }) => getApiChatMessages(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiChatMessages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiChatMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiChatMessages>>>
export type GetApiChatMessagesQueryError = ErrorType<unknown>


export function useGetApiChatMessages<TData = Awaited<ReturnType<typeof getApiChatMessages>>, TError = ErrorType<unknown>>(
 params: undefined |  GetApiChatMessagesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiChatMessages>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiChatMessages>>,
          TError,
          Awaited<ReturnType<typeof getApiChatMessages>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiChatMessages<TData = Awaited<ReturnType<typeof getApiChatMessages>>, TError = ErrorType<unknown>>(
 params?: GetApiChatMessagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiChatMessages>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiChatMessages>>,
          TError,
          Awaited<ReturnType<typeof getApiChatMessages>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiChatMessages<TData = Awaited<ReturnType<typeof getApiChatMessages>>, TError = ErrorType<unknown>>(
 params?: GetApiChatMessagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiChatMessages>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiChatMessages<TData = Awaited<ReturnType<typeof getApiChatMessages>>, TError = ErrorType<unknown>>(
 params?: GetApiChatMessagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiChatMessages>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiChatMessagesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiChatHealth = (
    
 signal?: AbortSignal
) => {
      
      
      return customApiClient<unknown>(
      {url: `/api/Chat/health`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiChatHealthQueryKey = () => {
    return [`/api/Chat/health`] as const;
    }

    
export const getGetApiChatHealthQueryOptions = <TData = Awaited<ReturnType<typeof getApiChatHealth>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiChatHealth>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiChatHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiChatHealth>>> = ({ signal }) => getApiChatHealth(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiChatHealth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiChatHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getApiChatHealth>>>
export type GetApiChatHealthQueryError = ErrorType<unknown>


export function useGetApiChatHealth<TData = Awaited<ReturnType<typeof getApiChatHealth>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiChatHealth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiChatHealth>>,
          TError,
          Awaited<ReturnType<typeof getApiChatHealth>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiChatHealth<TData = Awaited<ReturnType<typeof getApiChatHealth>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiChatHealth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiChatHealth>>,
          TError,
          Awaited<ReturnType<typeof getApiChatHealth>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiChatHealth<TData = Awaited<ReturnType<typeof getApiChatHealth>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiChatHealth>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiChatHealth<TData = Awaited<ReturnType<typeof getApiChatHealth>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiChatHealth>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiChatHealthQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiFilesUpload = (
    postApiFilesUploadBody: PostApiFilesUploadBody,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postApiFilesUploadBody.file !== undefined) {
 formData.append(`file`, postApiFilesUploadBody.file)
 }

      return customApiClient<void>(
      {url: `/api/Files/upload`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getPostApiFilesUploadMutationOptions = <TError = ErrorType<ProblemDetailsDTO>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFilesUpload>>, TError,{data: PostApiFilesUploadBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiFilesUpload>>, TError,{data: PostApiFilesUploadBody}, TContext> => {

const mutationKey = ['postApiFilesUpload'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiFilesUpload>>, {data: PostApiFilesUploadBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiFilesUpload(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiFilesUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFilesUpload>>>
    export type PostApiFilesUploadMutationBody = PostApiFilesUploadBody
    export type PostApiFilesUploadMutationError = ErrorType<ProblemDetailsDTO>

    export const usePostApiFilesUpload = <TError = ErrorType<ProblemDetailsDTO>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFilesUpload>>, TError,{data: PostApiFilesUploadBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiFilesUpload>>,
        TError,
        {data: PostApiFilesUploadBody},
        TContext
      > => {

      const mutationOptions = getPostApiFilesUploadMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postApiFilesUploadImage = (
    postApiFilesUploadImageBody: PostApiFilesUploadImageBody,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postApiFilesUploadImageBody.file !== undefined) {
 formData.append(`file`, postApiFilesUploadImageBody.file)
 }

      return customApiClient<void>(
      {url: `/api/Files/upload-image`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getPostApiFilesUploadImageMutationOptions = <TError = ErrorType<ProblemDetailsDTO>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFilesUploadImage>>, TError,{data: PostApiFilesUploadImageBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiFilesUploadImage>>, TError,{data: PostApiFilesUploadImageBody}, TContext> => {

const mutationKey = ['postApiFilesUploadImage'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiFilesUploadImage>>, {data: PostApiFilesUploadImageBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiFilesUploadImage(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiFilesUploadImageMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFilesUploadImage>>>
    export type PostApiFilesUploadImageMutationBody = PostApiFilesUploadImageBody
    export type PostApiFilesUploadImageMutationError = ErrorType<ProblemDetailsDTO>

    export const usePostApiFilesUploadImage = <TError = ErrorType<ProblemDetailsDTO>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFilesUploadImage>>, TError,{data: PostApiFilesUploadImageBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiFilesUploadImage>>,
        TError,
        {data: PostApiFilesUploadImageBody},
        TContext
      > => {

      const mutationOptions = getPostApiFilesUploadImageMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiFilesImagesLatest = (
    params?: GetApiFilesImagesLatestParams,
 signal?: AbortSignal
) => {
      
      
      return customApiClient<void>(
      {url: `/api/Files/images/latest`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiFilesImagesLatestQueryKey = (params?: GetApiFilesImagesLatestParams,) => {
    return [`/api/Files/images/latest`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiFilesImagesLatestQueryOptions = <TData = Awaited<ReturnType<typeof getApiFilesImagesLatest>>, TError = ErrorType<ProblemDetailsDTO>>(params?: GetApiFilesImagesLatestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesImagesLatest>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFilesImagesLatestQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFilesImagesLatest>>> = ({ signal }) => getApiFilesImagesLatest(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFilesImagesLatest>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiFilesImagesLatestQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFilesImagesLatest>>>
export type GetApiFilesImagesLatestQueryError = ErrorType<ProblemDetailsDTO>


export function useGetApiFilesImagesLatest<TData = Awaited<ReturnType<typeof getApiFilesImagesLatest>>, TError = ErrorType<ProblemDetailsDTO>>(
 params: undefined |  GetApiFilesImagesLatestParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesImagesLatest>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFilesImagesLatest>>,
          TError,
          Awaited<ReturnType<typeof getApiFilesImagesLatest>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiFilesImagesLatest<TData = Awaited<ReturnType<typeof getApiFilesImagesLatest>>, TError = ErrorType<ProblemDetailsDTO>>(
 params?: GetApiFilesImagesLatestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesImagesLatest>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFilesImagesLatest>>,
          TError,
          Awaited<ReturnType<typeof getApiFilesImagesLatest>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiFilesImagesLatest<TData = Awaited<ReturnType<typeof getApiFilesImagesLatest>>, TError = ErrorType<ProblemDetailsDTO>>(
 params?: GetApiFilesImagesLatestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesImagesLatest>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiFilesImagesLatest<TData = Awaited<ReturnType<typeof getApiFilesImagesLatest>>, TError = ErrorType<ProblemDetailsDTO>>(
 params?: GetApiFilesImagesLatestParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesImagesLatest>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiFilesImagesLatestQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiFilesInfoFilePath = (
    filePath: string,
 signal?: AbortSignal
) => {
      
      
      return customApiClient<void>(
      {url: `/api/Files/info/${filePath}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiFilesInfoFilePathQueryKey = (filePath: string,) => {
    return [`/api/Files/info/${filePath}`] as const;
    }

    
export const getGetApiFilesInfoFilePathQueryOptions = <TData = Awaited<ReturnType<typeof getApiFilesInfoFilePath>>, TError = ErrorType<ProblemDetailsDTO>>(filePath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesInfoFilePath>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiFilesInfoFilePathQueryKey(filePath);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFilesInfoFilePath>>> = ({ signal }) => getApiFilesInfoFilePath(filePath, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(filePath),  staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiFilesInfoFilePath>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiFilesInfoFilePathQueryResult = NonNullable<Awaited<ReturnType<typeof getApiFilesInfoFilePath>>>
export type GetApiFilesInfoFilePathQueryError = ErrorType<ProblemDetailsDTO>


export function useGetApiFilesInfoFilePath<TData = Awaited<ReturnType<typeof getApiFilesInfoFilePath>>, TError = ErrorType<ProblemDetailsDTO>>(
 filePath: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesInfoFilePath>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFilesInfoFilePath>>,
          TError,
          Awaited<ReturnType<typeof getApiFilesInfoFilePath>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiFilesInfoFilePath<TData = Awaited<ReturnType<typeof getApiFilesInfoFilePath>>, TError = ErrorType<ProblemDetailsDTO>>(
 filePath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesInfoFilePath>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFilesInfoFilePath>>,
          TError,
          Awaited<ReturnType<typeof getApiFilesInfoFilePath>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiFilesInfoFilePath<TData = Awaited<ReturnType<typeof getApiFilesInfoFilePath>>, TError = ErrorType<ProblemDetailsDTO>>(
 filePath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesInfoFilePath>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiFilesInfoFilePath<TData = Awaited<ReturnType<typeof getApiFilesInfoFilePath>>, TError = ErrorType<ProblemDetailsDTO>>(
 filePath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiFilesInfoFilePath>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiFilesInfoFilePathQueryOptions(filePath,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiNewsletterSubscribe = (
    subscribeToNewsletterRequestDTO: SubscribeToNewsletterRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customApiClient<SaveEmailToNewsletterResponseDTO>(
      {url: `/api/Newsletter/subscribe`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: subscribeToNewsletterRequestDTO, signal
    },
      );
    }
  


export const getPostApiNewsletterSubscribeMutationOptions = <TError = ErrorType<ProblemDetailsDTO>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiNewsletterSubscribe>>, TError,{data: SubscribeToNewsletterRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiNewsletterSubscribe>>, TError,{data: SubscribeToNewsletterRequestDTO}, TContext> => {

const mutationKey = ['postApiNewsletterSubscribe'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiNewsletterSubscribe>>, {data: SubscribeToNewsletterRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiNewsletterSubscribe(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiNewsletterSubscribeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiNewsletterSubscribe>>>
    export type PostApiNewsletterSubscribeMutationBody = SubscribeToNewsletterRequestDTO
    export type PostApiNewsletterSubscribeMutationError = ErrorType<ProblemDetailsDTO>

    export const usePostApiNewsletterSubscribe = <TError = ErrorType<ProblemDetailsDTO>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiNewsletterSubscribe>>, TError,{data: SubscribeToNewsletterRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiNewsletterSubscribe>>,
        TError,
        {data: SubscribeToNewsletterRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiNewsletterSubscribeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiOpenrouterToolsConversationsConversationId = (
    conversationId: string,
 signal?: AbortSignal
) => {
      
      
      return customApiClient<void>(
      {url: `/api/openrouter/tools/conversations/${conversationId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiOpenrouterToolsConversationsConversationIdQueryKey = (conversationId: string,) => {
    return [`/api/openrouter/tools/conversations/${conversationId}`] as const;
    }

    
export const getGetApiOpenrouterToolsConversationsConversationIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError = ErrorType<unknown>>(conversationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOpenrouterToolsConversationsConversationIdQueryKey(conversationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>> = ({ signal }) => getApiOpenrouterToolsConversationsConversationId(conversationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(conversationId),  staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOpenrouterToolsConversationsConversationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>>
export type GetApiOpenrouterToolsConversationsConversationIdQueryError = ErrorType<unknown>


export function useGetApiOpenrouterToolsConversationsConversationId<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError = ErrorType<unknown>>(
 conversationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsConversationsConversationId<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError = ErrorType<unknown>>(
 conversationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsConversationsConversationId<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError = ErrorType<unknown>>(
 conversationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOpenrouterToolsConversationsConversationId<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError = ErrorType<unknown>>(
 conversationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsConversationsConversationId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOpenrouterToolsConversationsConversationIdQueryOptions(conversationId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiOpenrouterToolsModels = (
    
 signal?: AbortSignal
) => {
      
      
      return customApiClient<void>(
      {url: `/api/openrouter/tools/models`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiOpenrouterToolsModelsQueryKey = () => {
    return [`/api/openrouter/tools/models`] as const;
    }

    
export const getGetApiOpenrouterToolsModelsQueryOptions = <TData = Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOpenrouterToolsModelsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>> = ({ signal }) => getApiOpenrouterToolsModels(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOpenrouterToolsModelsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>>
export type GetApiOpenrouterToolsModelsQueryError = ErrorType<unknown>


export function useGetApiOpenrouterToolsModels<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsModels<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsModels<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOpenrouterToolsModels<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsModels>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOpenrouterToolsModelsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiOpenrouterToolsChatStream = (
    params?: GetApiOpenrouterToolsChatStreamParams,
 signal?: AbortSignal
) => {
      
      
      return customApiClient<void>(
      {url: `/api/openrouter/tools/chat/stream`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiOpenrouterToolsChatStreamQueryKey = (params?: GetApiOpenrouterToolsChatStreamParams,) => {
    return [`/api/openrouter/tools/chat/stream`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiOpenrouterToolsChatStreamQueryOptions = <TData = Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError = ErrorType<unknown>>(params?: GetApiOpenrouterToolsChatStreamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOpenrouterToolsChatStreamQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>> = ({ signal }) => getApiOpenrouterToolsChatStream(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiOpenrouterToolsChatStreamQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>>
export type GetApiOpenrouterToolsChatStreamQueryError = ErrorType<unknown>


export function useGetApiOpenrouterToolsChatStream<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError = ErrorType<unknown>>(
 params: undefined |  GetApiOpenrouterToolsChatStreamParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsChatStream<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError = ErrorType<unknown>>(
 params?: GetApiOpenrouterToolsChatStreamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>,
          TError,
          Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiOpenrouterToolsChatStream<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError = ErrorType<unknown>>(
 params?: GetApiOpenrouterToolsChatStreamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiOpenrouterToolsChatStream<TData = Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError = ErrorType<unknown>>(
 params?: GetApiOpenrouterToolsChatStreamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOpenrouterToolsChatStream>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiOpenrouterToolsChatStreamQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiUsersId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customApiClient<void>(
      {url: `/api/Users/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiUsersIdQueryKey = (id: string,) => {
    return [`/api/Users/${id}`] as const;
    }

    
export const getGetApiUsersIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersId>>> = ({ signal }) => getApiUsersId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersId>>>
export type GetApiUsersIdQueryError = ErrorType<unknown>


export function useGetApiUsersId<TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersId<TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersId<TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUsersId<TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiUsersId = (
    id: string,
    updateUserRequestDTO: UpdateUserRequestDTO,
 ) => {
      
      
      return customApiClient<void>(
      {url: `/api/Users/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateUserRequestDTO
    },
      );
    }
  


export const getPutApiUsersIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersId>>, TError,{id: string;data: UpdateUserRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiUsersId>>, TError,{id: string;data: UpdateUserRequestDTO}, TContext> => {

const mutationKey = ['putApiUsersId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUsersId>>, {id: string;data: UpdateUserRequestDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiUsersId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiUsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUsersId>>>
    export type PutApiUsersIdMutationBody = UpdateUserRequestDTO
    export type PutApiUsersIdMutationError = ErrorType<unknown>

    export const usePutApiUsersId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersId>>, TError,{id: string;data: UpdateUserRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiUsersId>>,
        TError,
        {id: string;data: UpdateUserRequestDTO},
        TContext
      > => {

      const mutationOptions = getPutApiUsersIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const deleteApiUsersId = (
    id: string,
 ) => {
      
      
      return customApiClient<void>(
      {url: `/api/Users/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiUsersIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiUsersId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiUsersId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiUsersId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiUsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiUsersId>>>
    
    export type DeleteApiUsersIdMutationError = ErrorType<unknown>

    export const useDeleteApiUsersId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiUsersId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiUsersIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getApiUsersMe = (
    
 signal?: AbortSignal
) => {
      
      
      return customApiClient<void>(
      {url: `/api/Users/me`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiUsersMeQueryKey = () => {
    return [`/api/Users/me`] as const;
    }

    
export const getGetApiUsersMeQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsersMe>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersMe>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersMe>>> = ({ signal }) => getApiUsersMe(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsersMe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersMeQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersMe>>>
export type GetApiUsersMeQueryError = ErrorType<unknown>


export function useGetApiUsersMe<TData = Awaited<ReturnType<typeof getApiUsersMe>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersMe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersMe>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersMe>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersMe<TData = Awaited<ReturnType<typeof getApiUsersMe>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersMe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersMe>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersMe>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersMe<TData = Awaited<ReturnType<typeof getApiUsersMe>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersMe>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUsersMe<TData = Awaited<ReturnType<typeof getApiUsersMe>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersMe>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersMeQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiUsers = (
    params?: GetApiUsersParams,
 signal?: AbortSignal
) => {
      
      
      return customApiClient<void>(
      {url: `/api/Users`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiUsersQueryKey = (params?: GetApiUsersParams,) => {
    return [`/api/Users`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiUsersQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsers>>, TError = ErrorType<unknown>>(params?: GetApiUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsers>>> = ({ signal }) => getApiUsers(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsers>>>
export type GetApiUsersQueryError = ErrorType<unknown>


export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = ErrorType<unknown>>(
 params: undefined |  GetApiUsersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsers>>,
          TError,
          Awaited<ReturnType<typeof getApiUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = ErrorType<unknown>>(
 params?: GetApiUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsers>>,
          TError,
          Awaited<ReturnType<typeof getApiUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = ErrorType<unknown>>(
 params?: GetApiUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = ErrorType<unknown>>(
 params?: GetApiUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiUsers = (
    createUserRequestDTO: CreateUserRequestDTO,
 signal?: AbortSignal
) => {
      
      
      return customApiClient<void>(
      {url: `/api/Users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserRequestDTO, signal
    },
      );
    }
  


export const getPostApiUsersMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsers>>, TError,{data: CreateUserRequestDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiUsers>>, TError,{data: CreateUserRequestDTO}, TContext> => {

const mutationKey = ['postApiUsers'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUsers>>, {data: CreateUserRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiUsers(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUsers>>>
    export type PostApiUsersMutationBody = CreateUserRequestDTO
    export type PostApiUsersMutationError = ErrorType<unknown>

    export const usePostApiUsers = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsers>>, TError,{data: CreateUserRequestDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiUsers>>,
        TError,
        {data: CreateUserRequestDTO},
        TContext
      > => {

      const mutationOptions = getPostApiUsersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
