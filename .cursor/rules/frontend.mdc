---
description: 
globs: frontend/**/*,*.tsx,*.ts,*.css
alwaysApply: false
---
# Frontend Architecture - Vertical Slices

## üéØ Philosophy: PRAGMATIC OVER PERFECT
- **Speed over purity** - Ship features fast, refactor later
- **Simple patterns** - Avoid over-engineering 
- **Consistency** - Follow established patterns for AI predictability

## üìÅ Structure
```
src/
‚îú‚îÄ‚îÄ features/          # Self-contained feature slices
‚îú‚îÄ‚îÄ shared/           # Reusable components/hooks
‚îú‚îÄ‚îÄ api/              # ü§ñ ORVAL GENERATED (DO NOT EDIT)
‚îî‚îÄ‚îÄ app/              # Next.js App Router
```

## üèóÔ∏è Feature Slice Pattern
```
features/feature-name/
‚îú‚îÄ‚îÄ index.ts          # Exports (import { X } from '@/features/auth')
‚îú‚îÄ‚îÄ components/       # Feature components
‚îú‚îÄ‚îÄ hooks/           # Wraps api/hooks with business logic
‚îî‚îÄ‚îÄ [name]-context.tsx # Feature state (if needed)
```

## ü§ñ Orval Integration - CRITICAL
- **Generated**: `api/hooks/` (React Query) + `api/models/` (DTOs)
- **Regenerate**: `npm run api:generate` after backend changes
- **Pattern**: Features wrap generated hooks, add business logic
- **üö® NEVER EDIT**: Generated files will be overwritten

## üîß Tech Stack
- **Next.js 15** + **React 19** + **TypeScript 5**
- **React Query** + **shadcn/ui** + **Tailwind CSS**
- **Axios** (JWT auth) + **SignalR** (real-time)

## üìã Patterns

### Imports
```typescript
// External first
import { useState } from 'react';
// Internal with aliases
import { Button } from '@/shared/components/ui/button';
import { useAuth } from '@/features/auth';
import { useUsers } from '@/features/users'; // ‚úÖ Cross-feature OK
```

### Components
```typescript
export function Component({ prop }: Props) {
  // Hooks first - use namespaced, not destructured
  const data = useData();
  const form = useForm();
  
  // Event handlers
  const handleClick = () => data.refresh();
  
  // Render
  return <div>{content}</div>;
}
```

### Hook Usage - CRITICAL PATTERN
**Use namespaced hooks, NOT destructuring for cleaner code:**

```typescript
// ‚ùå BAD: Destructuring chaos
const { data, isLoading, error, hasData, create, update, delete: deleteItem, isCreating, isUpdating, isDeleting } = useItems();
const { name, setName, description, setDescription, isVisible, open, close, submit } = useForm();

// ‚úÖ GOOD: Clean namespaced
const items = useItems();
const form = useForm();

// Usage becomes crystal clear:
<button onClick={items.create} disabled={items.isCreating}>
  {items.isCreating ? 'Creating...' : 'Create'}
</button>
<input value={form.name} onChange={form.setName} />
```

**Benefits:**
- **5 lines instead of 20+** - massive reduction in component noise
- **Clear origins** - `items.create()` vs mystery `create()` function
- **Better IntelliSense** - type `items.` to see all available methods
- **No naming conflicts** - multiple hooks can have `isLoading`
- **Easier refactoring** - hook API changes don't break destructuring

### Code as Poetry
**Write code that reads like poetry - simple, clear, purposeful:**

```typescript
function MyComponent() {
  // Clean setup - like verses in a poem
  const data = useData();
  const form = useForm();
  const animations = useAnimations();

  // Guard clauses - clear and direct
  if (data.isLoading) return <Loading />;
  if (data.error) return <Error />;

  // Pure composition - every line has purpose
  return (
    <div>
      <Header />
      <CreateForm data={data} form={form} />
      <ItemsList data={data} animations={animations} />
    </div>
  );
}
```

**Poetry Principles:**
- **Rhythm** - Setup ‚Üí Guard ‚Üí Compose (natural flow)
- **Clarity** - Every variable name tells its story
- **Purpose** - No line exists without reason
- **Simplicity** - Complex is the enemy of readable

### API Hook Wrapping
```typescript
// features/users/hooks/use-users.ts
import { useGetUsers } from '@/api/hooks'; // Generated

export function useUsers() {
  const query = useGetUsers();
  
  // Add business logic here
  return {
    ...query,
    displayUsers: query.data?.map(u => ({
      ...u,
      fullName: `${u.firstName} ${u.lastName}`
    }))
  };
}
```

## üéØ Key Rules
- ‚úÖ Never edit `api/hooks/` or `api/models/`
- ‚úÖ Features CAN import from other features (be pragmatic)
- ‚úÖ Use Server Components by default, 'use client' when needed
- ‚úÖ JWT from localStorage, axios interceptors for auth
- ‚úÖ Wrap generated hooks in feature-specific hooks
- ‚úÖ Keep it simple - avoid over-engineering
- ‚úÖ Consistency over cleverness
- ‚úÖ keep the design clear, do not overuse emojis, make it feel real, and clean



## üö® Critical Gotchas
- **Orval regeneration** wipes `api/` folder - never edit directly
- **'use client'** needed for hooks, state, event handlers
- **SignalR connections** need cleanup in useEffect
- **JWT expiry** - handle 401s gracefully
- **Loading states** - always handle isLoading/error from React Query